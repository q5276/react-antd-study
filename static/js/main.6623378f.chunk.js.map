{"version":3,"sources":["logo.svg","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","props","handleBtnDelete","bind","this","delete","index","Item","actions","title","onConfirm","okText","cancelText","icon","DeleteOutlined","style","color","danger","content","Component","TodoList","state","data","inputValue","handleBtnClick","value","setState","splice","Search","placeholder","enterButton","size","onSearch","orientation","bordered","dataSource","renderItem","item","key","React","App","className","Header","src","Logo","alt","theme","mode","defaultSelectedKeys","Content","padding","margin","Footer","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,wWCgC5BC,E,kDA1BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAHR,E,8DAOfC,KAAKH,MAAMI,OAAOD,KAAKH,MAAMK,S,+BAI7B,OACI,sBAAMC,KAAN,CAAWC,QAAS,CAChB,uBAAYC,MAAM,UACdC,UAAWN,KAAKF,gBAChBS,OAAO,2BACPC,WAAW,6CACXC,KAAM,kBAACC,EAAA,EAAD,CAAgBC,MAAO,CAAEC,MAAO,UAEtC,uBAAQC,QAAM,GAAd,mBACab,KAAKH,MAAMiB,a,GAtBrBC,aCyCRC,E,kDAxCX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDoB,MAAQ,CACTC,KAAM,CACF,6CACA,wCAEJC,WAAY,IAGhB,EAAKrB,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKqB,eAAiB,EAAKA,eAAerB,KAApB,gBAXP,E,2DAcJsB,GACXrB,KAAKsB,SAAS,CACVJ,KAAK,GAAD,mBAAMlB,KAAKiB,MAAMC,MAAjB,CAAuBG,IAC3BF,WAAY,O,sCAIJjB,GACZ,IAAMgB,EAAI,YAAOlB,KAAKiB,MAAMC,MAC5BA,EAAKK,OAAOrB,EAAO,GACnBF,KAAKsB,SAAS,CAAEJ,W,+BAGV,IAAD,OACL,OACI,6BACI,sBAAOM,OAAP,CAAcC,YAAY,2BAAOC,YAAY,eAAKC,KAAK,QAAQC,SAAU5B,KAAKoB,iBAC9E,uBAASS,YAAY,QAArB,8CACA,uBAAMC,UAAQ,EAACC,WAAY/B,KAAKiB,MAAMC,KAClCc,WAAY,SAACC,EAAM/B,GAAP,OAAkB,kBAAC,EAAD,CAAUD,OAAQ,EAAKH,gBAAiBgB,QAASmB,EAAMC,IAAKhC,EAAOA,MAAOA,Y,GAlCrGiC,IAAMpB,W,kBC4BdqB,G,OA1BH,kBACV,uBAAQC,UAAU,UAChB,sBAAQC,OAAR,KACE,yBAAKD,UAAU,YACb,yBAAKE,IAAKC,IAAMC,IAAI,UAEtB,uBAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACzD,sBAAMzC,KAAN,CAAW+B,IAAI,KAAf,sBACA,sBAAM/B,KAAN,CAAW+B,IAAI,KAAf,iBACA,sBAAM/B,KAAN,CAAW+B,IAAI,KAAf,mBAGJ,sBAAQW,QAAR,CAAgBlC,MAAO,CAACmC,QAAS,WAC/B,uBAAYnC,MAAO,CAAEoC,OAAQ,WAC3B,sBAAY5C,KAAZ,qBACA,sBAAYA,KAAZ,2BACA,sBAAYA,KAAZ,kBAEF,yBAAKkC,UAAU,uBACb,kBAAC,EAAD,QAGJ,sBAAQW,OAAR,CAAerC,MAAO,CAAEsC,UAAW,WAAnC,6BChBgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6623378f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\nimport { List, Popconfirm, Button } from 'antd'\nimport { DeleteOutlined } from '@ant-design/icons'\n\nclass TodoItem extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.handleBtnDelete = this.handleBtnDelete.bind(this)\n    }\n\n    handleBtnDelete() {\n        this.props.delete(this.props.index)\n    }\n\n    render() {\n        return (\n            <List.Item actions={[\n                <Popconfirm title=\"Delete?\"\n                    onConfirm={this.handleBtnDelete}\n                    okText=\"残忍删除\"\n                    cancelText=\"算了，留着吧！\"\n                    icon={<DeleteOutlined style={{ color: 'red' }} />}\n                >\n                    <Button danger>删除</Button>\n                </Popconfirm>]}>{this.props.content}\n            </List.Item>\n        )\n    }\n}\n\nexport default TodoItem","import React from 'react'\nimport { Input, List, Divider } from 'antd'\nimport TodoItem from './TodoItem'\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [\n                '今天要学习英语',\n                '还要学习数学'\n            ],\n            inputValue: ''\n        }\n\n        this.handleBtnDelete = this.handleBtnDelete.bind(this)\n        this.handleBtnClick = this.handleBtnClick.bind(this)\n    }\n\n    handleBtnClick(value) {\n        this.setState({\n            data: [...this.state.data, value],\n            inputValue: ''\n        })\n    }\n\n    handleBtnDelete(index) {\n        const data = [...this.state.data]\n        data.splice(index, 1)\n        this.setState({ data })\n    }\n\n    render() {\n        return (\n            <div>\n                <Input.Search placeholder=\"输入任务\" enterButton=\"增加\" size=\"large\" onSearch={this.handleBtnClick}></Input.Search>\n                <Divider orientation=\"left\">下面是任务列表</Divider>\n                <List bordered dataSource={this.state.data}\n                    renderItem={(item, index) => (<TodoItem delete={this.handleBtnDelete} content={item} key={index} index={index} />)}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TodoList","import React from 'react'\nimport { Layout, Menu, Breadcrumb } from 'antd'\nimport TodoList from './components/TodoList'\nimport Logo from './logo.svg'\nimport './App.css'\n\nconst App = () => (\n  <Layout className=\"layout\">\n    <Layout.Header>\n      <div className=\"App-logo\">\n        <img src={Logo} alt=\"LOGO\" />\n      </div>\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n        <Menu.Item key=\"1\">第一章</Menu.Item>\n        <Menu.Item key=\"2\">菜单2</Menu.Item>\n        <Menu.Item key=\"3\">菜单3</Menu.Item>\n      </Menu>\n    </Layout.Header>\n    <Layout.Content style={{padding: '0 50px'}}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item>首页</Breadcrumb.Item>\n        <Breadcrumb.Item>第一章</Breadcrumb.Item>\n        <Breadcrumb.Item>TodoList</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-layout-content\">\n        <TodoList></TodoList>\n      </div>\n    </Layout.Content>\n    <Layout.Footer style={{ textAlign: 'center'}}> Tingno Created By Ant</Layout.Footer>\n  </Layout>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}